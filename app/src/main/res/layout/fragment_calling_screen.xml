<?xml version="1.0" encoding="utf-8"?>
<!-- In-call Phone UI; see InCallScreen.java. -->
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <!-- The "Call Card", which displays info about the currently
         active phone call(s) on the device.  See call_card.xml.

         Note that the CallCard is technically the size of the full screen
         (since layout_width and layout_height are both "match_parent" here) but
         we manually adjust its bottom margin in CallCard.updateCallInfoLayout()
         to make sure it doesn't overlap with the onscreen buttons from
         incall_touch_ui.xml. -->
    <!--<include-->
        <!--layout="@layout/call_card"-->
        <!--android:id="@+id/callCard"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--/>-->

    <!--&lt;!&ndash; In-call onscreen touch controls; see InCallTouchUi.java.-->
         <!--This widget contains the cluster of buttons shown at the bottom-->
         <!--of the in-call screen, and also the DTMF dialpad (which, when-->
         <!--visible, covers the upper part of the screen too.) &ndash;&gt;-->
    <!--<include layout="@layout/incall_touch_ui"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--/>-->

    <!--&lt;!&ndash; ViewStub for OTASP-related UI elements (for the CDMA "activation"-->
         <!--call.)  Note that this ViewStub provides the *entire* OTASP-->
         <!--screen, including the status area at the top *and* touch controls-->
         <!--at the bottom of the screen.  The regular CallCard and the-->
         <!--InCallTouchUi widget are not used at all during an OTASP call. &ndash;&gt;-->
    <!--<ViewStub android:id="@+id/otaCallCardStub"-->
        <!--android:layout="@layout/otacall_card"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--/>-->

    <!--&lt;!&ndash; The "Manage conference" UI.  This panel is displayed (and covers up-->
         <!--the entire normal in-call UI) when the user clicks "Manage conference"-->
         <!--during a GSM conference call. &ndash;&gt;-->
    <!--<ViewStub android:id="@+id/manageConferencePanelStub"-->
        <!--android:layout="@layout/manage_conference_panel"-->
        <!--android:layout_width="match_parent"-->
        <!--android:layout_height="match_parent"-->
        <!--/>-->

</FrameLayout>